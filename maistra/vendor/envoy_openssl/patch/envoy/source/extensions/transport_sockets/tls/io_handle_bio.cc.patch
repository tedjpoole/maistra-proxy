--- a/source/extensions/transport_sockets/tls/io_handle_bio.cc
+++ b/source/extensions/transport_sockets/tls/io_handle_bio.cc
@@ -15,15 +15,14 @@ namespace {
 
 // NOLINTNEXTLINE(readability-identifier-naming)
 inline Envoy::Network::IoHandle* bio_io_handle(BIO* bio) {
-  return reinterpret_cast<Envoy::Network::IoHandle*>(bio->ptr);
+  return reinterpret_cast<Envoy::Network::IoHandle*>(BIO_get_data(bio));
 }
 
 // NOLINTNEXTLINE(readability-identifier-naming)
 int io_handle_new(BIO* bio) {
-  bio->init = 0;
-  bio->num = -1;
-  bio->ptr = nullptr;
-  bio->flags = 0;
+  BIO_set_init(bio, 0);
+  BIO_set_data(bio, nullptr);
+  BIO_clear_flags(bio, ~0);
   return 1;
 }
 
@@ -33,12 +32,12 @@ int io_handle_free(BIO* bio) {
     return 0;
   }
 
-  if (bio->shutdown) {
-    if (bio->init) {
+  if (BIO_get_shutdown(bio)) {
+    if (BIO_get_init(bio)) {
       bio_io_handle(bio)->close();
     }
-    bio->init = 0;
-    bio->flags = 0;
+    BIO_set_init(bio, 0);
+    BIO_clear_flags(bio, ~0);
   }
   return 1;
 }
@@ -97,10 +96,10 @@ long io_handle_ctrl(BIO* b, int cmd, long num, void*) {
     RELEASE_ASSERT(false, "should not be called");
     break;
   case BIO_CTRL_GET_CLOSE:
-    ret = b->shutdown;
+    ret = BIO_get_shutdown(b);
     break;
   case BIO_CTRL_SET_CLOSE:
-    b->shutdown = int(num);
+    BIO_set_shutdown(b, int(num));
     break;
   case BIO_CTRL_FLUSH:
     ret = 1;
@@ -133,10 +132,9 @@ BIO* BIO_new_io_handle(Envoy::Network::IoHandle* io_handle) {
   RELEASE_ASSERT(b != nullptr, "");
 
   // Initialize the BIO
-  b->num = -1;
-  b->ptr = io_handle;
-  b->shutdown = 0;
-  b->init = 1;
+  BIO_set_data(b, io_handle);
+  BIO_set_shutdown(b, 0);
+  BIO_set_init(b, 1);
 
   return b;
 }

--- a/src/jwks.cc	2023-09-05 23:03:52.783122389 +1000
+++ b/src/jwks.cc	2023-09-08 23:06:47.899849495 +1000
@@ -97,18 +97,22 @@
   bssl::UniquePtr<RSA> createRsaFromJwk(const std::string& n,
                                         const std::string& e) {
     bssl::UniquePtr<RSA> rsa(RSA_new());
-    rsa->n = createBigNumFromBase64UrlString(n).release();
-    rsa->e = createBigNumFromBase64UrlString(e).release();
-    if (rsa->n == nullptr || rsa->e == nullptr) {
+    bssl::UniquePtr<BIGNUM> bn_n = createBigNumFromBase64UrlString(n);
+    bssl::UniquePtr<BIGNUM> bn_e = createBigNumFromBase64UrlString(e);
+
+    if (bn_n == nullptr || bn_e == nullptr) {
       // RSA public key field is missing or has parse error.
       updateStatus(Status::JwksRsaParseError);
       return nullptr;
     }
-    if (BN_cmp_word(rsa->e, 3) != 0 && BN_cmp_word(rsa->e, 65537) != 0) {
+
+    if (BN_cmp_word(bn_e.get(), 3) != 0 && BN_cmp_word(bn_e.get(), 65537) != 0) {
       // non-standard key; reject it early.
       updateStatus(Status::JwksRsaParseError);
       return nullptr;
     }
+
+    RSA_set0_key(rsa.get(), bn_n.release(), bn_e.release(), NULL);
     return rsa;
   }
 
